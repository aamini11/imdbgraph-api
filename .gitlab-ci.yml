stages:
  - test
  - publish
  - deploy

# ================================= JOBS =======================================
# Builds the main app JAR file and runs all tests.
test_job:
  stage: test
  extends:
    - .gradle-job
    - .docker-job # Docker needed by TestContainer in integration tests.
  script:
    ./gradlew check -Pversion=$CI_COMMIT_TAG
  artifacts: # Tells GitLab where test reports are.
    when: always
    reports:
      junit:
        - build/test-results/test/**/TEST-*.xml
        - build/test-results/integrationTest/**/TEST-*.xml

# Builds the app's docker image and pushes it to GitLab's registry.
publish_job:
  stage: publish
  extends:
    - .gradle-job
    - .docker-job # Docker needed to build images.
  variables:
    CI_REGISTRY: $CI_REGISTRY
    CI_REGISTRY_USER: $CI_REGISTRY_USER
    CI_REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD
  script:
    ./gradlew bootBuildImage --publishImage --imageName $CI_REGISTRY/imdbgraph/imdbgraph-api:$CI_COMMIT_REF_NAME

# Deployment job which will run scripts to make sure host machine is configured
# and up to date. Including updating the container running the app with the
# latest image that was built and published in the previous step.
deploy_job:
  stage: deploy
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  extends: .ssh-job
  script:
    - pip install ansible
    - cd infra/ansible
    - ansible-playbook -i production -e @secrets.enc --vault-password-file $ANSIBLE_PASSWORD_FILE site.yml
# ================================= JOBS =======================================

# =============================== HELPERS ======================================
# Sets up gradle + cache for jobs that need to run gradle commands
.gradle-job:
  image: openjdk:21-buster
  variables:
    GRADLE_USER_HOME: $CI_PROJECT_DIR/.gradle
  cache: # https://cookbook.gradle.org/ci/gitlab-ci/#enable-caching
    paths:
      - .gradle/wrapper
    key:
      files:
        - gradle/wrapper/gradle-wrapper.properties

# Sets up a docker daemon service for jobs that need to communicate to one.
.docker-job:
  variables:
    DOCKER_HOST: tcp://docker:2375 # Required (https://stackoverflow.com/a/73587059)
  services:
    - docker:dind

# Sets up SSH for jobs that need to connect to the host machine for deployments.
# Requires access to the $SSH_PRIVATE_KEY file that only runners running on
# protected branches like main can access.
#
# https://docs.gitlab.com/ee/ci/ssh_keys
.ssh-job:
  before_script:
    # Install ssh-agent
    - command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )

    # https://unix.stackexchange.com/q/351725
    - eval $(ssh-agent -s)

    # Give right permissions so ssh-add can add SSH key to agent store.
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - chmod 400 "$SSH_PRIVATE_KEY"
    - ssh-add "$SSH_PRIVATE_KEY"

    # Add to known_hosts
    - cp "$SSH_KNOWN_HOSTS" ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
# ==============================================================================